{"ast":null,"code":"// main\n\nimport { sentenceTemplates, phrases } from './sample.js';\nimport { setRandom, randfloat, randint, rand, pickLastPunc, generator } from './util.js';\nexport { generate as lorem } from './lorem.js';\nexport { addNouns, addAdjectives, addTemplates, setNouns, setAdjectives, setTemplates, getNouns, getAdjectives, getTemplates } from './sample.js';\nconst actions = ['noun', 'a_noun', 'nouns', 'adjective', 'an_adjective'];\nconst trim = s => {\n  return s.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '').replace(/\\r?\\n|\\r/g, ' ').replace(/\\s\\s+|\\r/g, ' ');\n};\nconst make = template => {\n  let sentence = template;\n  const occurrences = template.match(/\\{\\{(.+?)\\}\\}/g);\n  if (occurrences && occurrences.length) {\n    for (let i = 0; i < occurrences.length; i++) {\n      const action = trim(occurrences[i].replace('{{', '').replace('}}', ''));\n      let result;\n      if (actions.includes(action)) {\n        result = generator[action]();\n      }\n      sentence = sentence.replace(occurrences[i], result);\n    }\n  }\n  return sentence;\n};\nconst randomStartingPhrase = () => {\n  if (randfloat() < 0.33) {\n    return rand(phrases);\n  }\n  return '';\n};\nconst makeSentenceFromTemplate = () => {\n  return make(rand(sentenceTemplates));\n};\nexport { setRandom };\nexport const sentence = (ignoreStartingPhrase = false) => {\n  const phrase = ignoreStartingPhrase ? '' : randomStartingPhrase();\n  let s = phrase + makeSentenceFromTemplate();\n  s = s.charAt(0).toUpperCase() + s.slice(1);\n  s += pickLastPunc();\n  return s;\n};\nexport const paragraph = (len = 0) => {\n  if (!len) {\n    len = randint(3, 10);\n  }\n  const t = Math.min(len, 15);\n  const a = [];\n  while (a.length < t) {\n    const s = sentence();\n    a.push(s);\n  }\n  return a.join(' ');\n};\nexport const article = (len = 0) => {\n  if (!len) {\n    len = randint(3, 10);\n  }\n  const t = Math.min(len, 15);\n  const a = [];\n  while (a.length < t) {\n    const s = paragraph();\n    a.push(s);\n  }\n  return a.join('\\n\\n');\n};","map":{"version":3,"names":["sentenceTemplates","phrases","setRandom","randfloat","randint","rand","pickLastPunc","generator","generate","lorem","addNouns","addAdjectives","addTemplates","setNouns","setAdjectives","setTemplates","getNouns","getAdjectives","getTemplates","actions","trim","s","replace","make","template","sentence","occurrences","match","length","i","action","result","includes","randomStartingPhrase","makeSentenceFromTemplate","ignoreStartingPhrase","phrase","charAt","toUpperCase","slice","paragraph","len","t","Math","min","a","push","join","article"],"sources":["C:/Users/DELL/Desktop/Archive/node_modules/txtgen/src/main.js"],"sourcesContent":["// main\n\nimport {\n  sentenceTemplates,\n  phrases\n} from './sample.js'\n\nimport {\n  setRandom,\n  randfloat,\n  randint,\n  rand,\n  pickLastPunc,\n  generator\n} from './util.js'\n\nexport {\n  generate as lorem\n} from './lorem.js'\n\nexport {\n  addNouns,\n  addAdjectives,\n  addTemplates,\n  setNouns,\n  setAdjectives,\n  setTemplates,\n  getNouns,\n  getAdjectives,\n  getTemplates\n} from './sample.js'\n\nconst actions = [\n  'noun', 'a_noun', 'nouns',\n  'adjective', 'an_adjective',\n]\n\nconst trim = (s) => {\n  return s.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '')\n    .replace(/\\r?\\n|\\r/g, ' ')\n    .replace(/\\s\\s+|\\r/g, ' ')\n}\n\nconst make = (template) => {\n  let sentence = template\n  const occurrences = template.match(/\\{\\{(.+?)\\}\\}/g)\n\n  if (occurrences && occurrences.length) {\n    for (let i = 0; i < occurrences.length; i++) {\n      const action = trim(occurrences[i].replace('{{', '').replace('}}', ''))\n      let result\n      if (actions.includes(action)) {\n        result = generator[action]()\n      }\n      sentence = sentence.replace(occurrences[i], result)\n    }\n  }\n  return sentence\n}\n\nconst randomStartingPhrase = () => {\n  if (randfloat() < 0.33) {\n    return rand(phrases)\n  }\n  return ''\n}\n\nconst makeSentenceFromTemplate = () => {\n  return make(rand(sentenceTemplates))\n}\n\nexport {\n  setRandom\n}\n\nexport const sentence = (ignoreStartingPhrase = false) => {\n  const phrase = ignoreStartingPhrase ? '' : randomStartingPhrase()\n  let s = phrase + makeSentenceFromTemplate()\n  s = s.charAt(0).toUpperCase() + s.slice(1)\n  s += pickLastPunc()\n  return s\n}\n\nexport const paragraph = (len = 0) => {\n  if (!len) {\n    len = randint(3, 10)\n  }\n  const t = Math.min(len, 15)\n  const a = []\n  while (a.length < t) {\n    const s = sentence()\n    a.push(s)\n  }\n  return a.join(' ')\n}\n\nexport const article = (len = 0) => {\n  if (!len) {\n    len = randint(3, 10)\n  }\n  const t = Math.min(len, 15)\n  const a = []\n  while (a.length < t) {\n    const s = paragraph()\n    a.push(s)\n  }\n  return a.join('\\n\\n')\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}